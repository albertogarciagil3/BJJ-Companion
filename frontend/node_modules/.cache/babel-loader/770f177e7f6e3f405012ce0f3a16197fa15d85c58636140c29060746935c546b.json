{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alber\\\\Desktop\\\\bjj-companion\\\\frontend\\\\src\\\\components\\\\TechniqueTable.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { useReactTable, getCoreRowModel, flexRender } from '@tanstack/react-table';\nimport { getgetPositions, getTechniqueTypes, addCustomFieldToTechnique } from '../services/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TechniqueTable = ({\n  techniques,\n  updateTechnique,\n  deleteTechnique\n}) => {\n  _s();\n  const [isEditing, setIsEditing] = useState(null);\n  const [editedTechnique, setEditedTechnique] = useState(null);\n  const [positions, setPositions] = useState([]);\n  const [techniqueTypes, setTechniqueTypes] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [newFieldType, setNewFieldType] = useState('');\n  const [newFieldName, setNewFieldName] = useState('');\n  useEffect(() => {\n    const fetchPositions = async () => {\n      try {\n        const data = await getPositions();\n        setPositions(data);\n      } catch (error) {\n        console.error('Error al obtener posiciones:', error);\n      }\n    };\n    fetchPositions();\n  }, []);\n  useEffect(() => {\n    const fetchTechniqueTypes = async () => {\n      try {\n        const data = await getTechniqueTypes();\n        setTechniqueTypes(data);\n      } catch (error) {\n        console.error('Error al obtener tipos de técnica:', error);\n      }\n    };\n    fetchTechniqueTypes();\n  }, []);\n  const getPositionName = id => {\n    const position = positions.find(pos => pos._id === id);\n    return position ? position.name : 'Sin posición';\n  };\n  const getTechniqueTypeName = idArray => {\n    const names = idArray.map(id => {\n      const type = techniqueTypes.find(t => t._id === id);\n      return type ? type.name : 'Sin tipo';\n    }).join(', ');\n    return names;\n  };\n  const columns = useMemo(() => [{\n    id: 'name',\n    accessorKey: 'name',\n    header: 'Nombre'\n  }, {\n    id: 'techniqueType',\n    accessorKey: 'techniqueType',\n    header: 'Tipo',\n    cell: ({\n      getValue\n    }) => getTechniqueTypeName(getValue())\n  }, {\n    id: 'positionStart',\n    accessorKey: 'positionStart',\n    header: 'Posición Inicial',\n    cell: ({\n      getValue\n    }) => getPositionName(getValue())\n  }, {\n    id: 'endPosition',\n    accessorKey: 'endPosition',\n    header: 'Posición Final',\n    cell: ({\n      getValue\n    }) => getPositionName(getValue())\n  }, {\n    id: 'proficiencyLevel',\n    accessorKey: 'proficiencyLevel',\n    header: 'Proficiency Level'\n  }, {\n    id: 'giNoGi',\n    accessorKey: 'giNoGi',\n    header: 'Gi/No Gi'\n  }, {\n    id: 'actions',\n    // Agregar id para esta columna\n    header: 'Acciones',\n    cell: ({\n      row\n    }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleEdit(row.original),\n        children: \"Editar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteTechnique(row.original._id),\n        style: styles.deleteButton,\n        children: \"Eliminar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true)\n  }, {\n    id: 'addNewField',\n    // Agregar id aquí también\n    header: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowModal(true),\n      style: styles.addNewFieldButton,\n      children: \"Add New Field\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }, this),\n    cell: () => null // No hay datos en esta celda para las técnicas existentes\n  }], [positions, techniqueTypes]);\n  const table = useReactTable({\n    data: techniques,\n    columns,\n    getCoreRowModel: getCoreRowModel()\n  });\n  const handleEdit = technique => {\n    setIsEditing(technique._id);\n    setEditedTechnique({\n      ...technique\n    });\n  };\n  const handleSave = () => {\n    updateTechnique(editedTechnique);\n    setIsEditing(null);\n  };\n  const handleCancel = () => {\n    setIsEditing(null);\n    setEditedTechnique(null);\n  };\n  const handleAddNewField = async () => {\n    try {\n      // Llama al backend para agregar el campo personalizado\n      await addCustomFieldToTechnique(newFieldName, newFieldType);\n      setShowModal(false);\n      setNewFieldName('');\n      setNewFieldType('');\n\n      // Vuelve a cargar las técnicas para reflejar el nuevo campo\n      const updatedTechniques = await getTechniques();\n      setTechniques(updatedTechniques); // Esto asegura que los datos estén actualizados\n    } catch (error) {\n      console.error('Error al agregar nuevo campo:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Techniques\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      style: styles.table,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: table.getHeaderGroups().map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: headerGroup.headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n            style: styles.cell,\n            children: flexRender(header.column.columnDef.header, header.getContext())\n          }, header.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 33\n          }, this))\n        }, headerGroup.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: table.getRowModel().rows.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.getVisibleCells().map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n            style: styles.cell,\n            children: flexRender(cell.column.columnDef.cell, cell.getContext())\n          }, cell.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 33\n          }, this))\n        }, row.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), showModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.modalOverlay,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.modal,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Agregar nuevo campo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Nombre del campo\",\n          value: newFieldName,\n          onChange: e => setNewFieldName(e.target.value),\n          style: styles.input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: newFieldType,\n          onChange: e => setNewFieldType(e.target.value),\n          style: styles.input,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Selecciona el tipo de dato\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"string\",\n            children: \"Texto\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"number\",\n            children: \"N\\xFAmero\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rating\",\n            children: \"Calificaci\\xF3n (1 a 10)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"boolean\",\n            children: \"Checklist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddNewField,\n          style: styles.saveButton,\n          children: \"Agregar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowModal(false),\n          style: styles.closeButton,\n          children: \"Cancelar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 9\n  }, this);\n};\n_s(TechniqueTable, \"3heAFJVkZW5FuX9YamARYNZWjAk=\", false, function () {\n  return [useReactTable];\n});\n_c = TechniqueTable;\nconst styles = {\n  table: {\n    width: '100%',\n    borderCollapse: 'collapse',\n    border: '1px solid black'\n  },\n  cell: {\n    textAlign: 'left',\n    border: '1px solid black',\n    padding: '8px'\n  },\n  deleteButton: {\n    color: 'red'\n  },\n  addNewFieldButton: {\n    color: 'blue'\n  },\n  modalOverlay: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  modal: {\n    backgroundColor: 'white',\n    padding: '2rem',\n    borderRadius: '5px',\n    width: '300px'\n  },\n  input: {\n    width: '100%',\n    marginBottom: '1rem',\n    padding: '0.5rem'\n  },\n  saveButton: {\n    marginRight: '0.5rem'\n  },\n  closeButton: {\n    color: 'red'\n  }\n};\nexport default TechniqueTable;\nvar _c;\n$RefreshReg$(_c, \"TechniqueTable\");","map":{"version":3,"names":["React","useMemo","useState","useEffect","useReactTable","getCoreRowModel","flexRender","getgetPositions","getTechniqueTypes","addCustomFieldToTechnique","jsxDEV","_jsxDEV","Fragment","_Fragment","TechniqueTable","techniques","updateTechnique","deleteTechnique","_s","isEditing","setIsEditing","editedTechnique","setEditedTechnique","positions","setPositions","techniqueTypes","setTechniqueTypes","showModal","setShowModal","newFieldType","setNewFieldType","newFieldName","setNewFieldName","fetchPositions","data","getPositions","error","console","fetchTechniqueTypes","getPositionName","id","position","find","pos","_id","name","getTechniqueTypeName","idArray","names","map","type","t","join","columns","accessorKey","header","cell","getValue","row","children","onClick","handleEdit","original","fileName","_jsxFileName","lineNumber","columnNumber","style","styles","deleteButton","addNewFieldButton","table","technique","handleSave","handleCancel","handleAddNewField","updatedTechniques","getTechniques","setTechniques","getHeaderGroups","headerGroup","headers","column","columnDef","getContext","getRowModel","rows","getVisibleCells","modalOverlay","modal","placeholder","value","onChange","e","target","input","saveButton","closeButton","_c","width","borderCollapse","border","textAlign","padding","color","top","left","right","bottom","backgroundColor","display","justifyContent","alignItems","borderRadius","marginBottom","marginRight","$RefreshReg$"],"sources":["C:/Users/alber/Desktop/bjj-companion/frontend/src/components/TechniqueTable.js"],"sourcesContent":["import React, { useMemo, useState, useEffect } from 'react';\r\nimport { useReactTable, getCoreRowModel, flexRender } from '@tanstack/react-table';\r\nimport { getgetPositions, getTechniqueTypes, addCustomFieldToTechnique } from '../services/api';\r\n\r\nconst TechniqueTable = ({ techniques, updateTechnique, deleteTechnique }) => {\r\n    const [isEditing, setIsEditing] = useState(null);\r\n    const [editedTechnique, setEditedTechnique] = useState(null);\r\n    const [positions, setPositions] = useState([]);\r\n    const [techniqueTypes, setTechniqueTypes] = useState([]);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [newFieldType, setNewFieldType] = useState('');\r\n    const [newFieldName, setNewFieldName] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchPositions = async () => {\r\n            try {\r\n                const data = await getPositions();\r\n                setPositions(data);\r\n            } catch (error) {\r\n                console.error('Error al obtener posiciones:', error);\r\n            }\r\n        };\r\n        fetchPositions();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchTechniqueTypes = async () => {\r\n            try {\r\n                const data = await getTechniqueTypes();\r\n                setTechniqueTypes(data);\r\n            } catch (error) {\r\n                console.error('Error al obtener tipos de técnica:', error);\r\n            }\r\n        };\r\n        fetchTechniqueTypes();\r\n    }, []);\r\n\r\n    const getPositionName = (id) => {\r\n        const position = positions.find((pos) => pos._id === id);\r\n        return position ? position.name : 'Sin posición';\r\n    };\r\n\r\n    const getTechniqueTypeName = (idArray) => {\r\n        const names = idArray\r\n            .map((id) => {\r\n                const type = techniqueTypes.find((t) => t._id === id);\r\n                return type ? type.name : 'Sin tipo';\r\n            })\r\n            .join(', ');\r\n        return names;\r\n    };\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            { id: 'name', accessorKey: 'name', header: 'Nombre' },\r\n            {\r\n                id: 'techniqueType',\r\n                accessorKey: 'techniqueType',\r\n                header: 'Tipo',\r\n                cell: ({ getValue }) => getTechniqueTypeName(getValue()),\r\n            },\r\n            {\r\n                id: 'positionStart',\r\n                accessorKey: 'positionStart',\r\n                header: 'Posición Inicial',\r\n                cell: ({ getValue }) => getPositionName(getValue()),\r\n            },\r\n            {\r\n                id: 'endPosition',\r\n                accessorKey: 'endPosition',\r\n                header: 'Posición Final',\r\n                cell: ({ getValue }) => getPositionName(getValue()),\r\n            },\r\n            { id: 'proficiencyLevel', accessorKey: 'proficiencyLevel', header: 'Proficiency Level' },\r\n            { id: 'giNoGi', accessorKey: 'giNoGi', header: 'Gi/No Gi' },\r\n            {\r\n                id: 'actions',  // Agregar id para esta columna\r\n                header: 'Acciones',\r\n                cell: ({ row }) => (\r\n                    <>\r\n                        <button onClick={() => handleEdit(row.original)}>Editar</button>\r\n                        <button\r\n                            onClick={() => deleteTechnique(row.original._id)}\r\n                            style={styles.deleteButton}\r\n                        >\r\n                            Eliminar\r\n                        </button>\r\n                    </>\r\n                ),\r\n            },\r\n            {\r\n                id: 'addNewField',  // Agregar id aquí también\r\n                header: (\r\n                    <button onClick={() => setShowModal(true)} style={styles.addNewFieldButton}>\r\n                        Add New Field\r\n                    </button>\r\n                ),\r\n                cell: () => null, // No hay datos en esta celda para las técnicas existentes\r\n            },\r\n        ],\r\n        [positions, techniqueTypes]\r\n    );\r\n\r\n    const table = useReactTable({\r\n        data: techniques,\r\n        columns,\r\n        getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    const handleEdit = (technique) => {\r\n        setIsEditing(technique._id);\r\n        setEditedTechnique({ ...technique });\r\n    };\r\n\r\n    const handleSave = () => {\r\n        updateTechnique(editedTechnique);\r\n        setIsEditing(null);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsEditing(null);\r\n        setEditedTechnique(null);\r\n    };\r\n\r\n    const handleAddNewField = async () => {\r\n        try {\r\n            // Llama al backend para agregar el campo personalizado\r\n            await addCustomFieldToTechnique(newFieldName, newFieldType);\r\n            setShowModal(false);\r\n            setNewFieldName('');\r\n            setNewFieldType('');\r\n\r\n            // Vuelve a cargar las técnicas para reflejar el nuevo campo\r\n            const updatedTechniques = await getTechniques();\r\n            setTechniques(updatedTechniques); // Esto asegura que los datos estén actualizados\r\n\r\n        } catch (error) {\r\n            console.error('Error al agregar nuevo campo:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Techniques</h1>\r\n            <table style={styles.table}>\r\n                <thead>\r\n                    {table.getHeaderGroups().map((headerGroup) => (\r\n                        <tr key={headerGroup.id}>\r\n                            {headerGroup.headers.map((header) => (\r\n                                <th key={header.id} style={styles.cell}>\r\n                                    {flexRender(header.column.columnDef.header, header.getContext())}\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody>\r\n                    {table.getRowModel().rows.map((row) => (\r\n                        <tr key={row.id}>\r\n                            {row.getVisibleCells().map((cell) => (\r\n                                <td key={cell.id} style={styles.cell}>\r\n                                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                                </td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n\r\n            {showModal && (\r\n                <div style={styles.modalOverlay}>\r\n                    <div style={styles.modal}>\r\n                        <h2>Agregar nuevo campo</h2>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Nombre del campo\"\r\n                            value={newFieldName}\r\n                            onChange={(e) => setNewFieldName(e.target.value)}\r\n                            style={styles.input}\r\n                        />\r\n                        <select\r\n                            value={newFieldType}\r\n                            onChange={(e) => setNewFieldType(e.target.value)}\r\n                            style={styles.input}\r\n                        >\r\n                            <option value=\"\">Selecciona el tipo de dato</option>\r\n                            <option value=\"string\">Texto</option>\r\n                            <option value=\"number\">Número</option>\r\n                            <option value=\"rating\">Calificación (1 a 10)</option>\r\n                            <option value=\"boolean\">Checklist</option>\r\n                        </select>\r\n                        <button onClick={handleAddNewField} style={styles.saveButton}>\r\n                            Agregar\r\n                        </button>\r\n                        <button onClick={() => setShowModal(false)} style={styles.closeButton}>\r\n                            Cancelar\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst styles = {\r\n    table: {\r\n        width: '100%',\r\n        borderCollapse: 'collapse',\r\n        border: '1px solid black',\r\n    },\r\n    cell: {\r\n        textAlign: 'left',\r\n        border: '1px solid black',\r\n        padding: '8px',\r\n    },\r\n    deleteButton: {\r\n        color: 'red',\r\n    },\r\n    addNewFieldButton: {\r\n        color: 'blue',\r\n    },\r\n    modalOverlay: {\r\n        position: 'fixed',\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    modal: {\r\n        backgroundColor: 'white',\r\n        padding: '2rem',\r\n        borderRadius: '5px',\r\n        width: '300px',\r\n    },\r\n    input: {\r\n        width: '100%',\r\n        marginBottom: '1rem',\r\n        padding: '0.5rem',\r\n    },\r\n    saveButton: {\r\n        marginRight: '0.5rem',\r\n    },\r\n    closeButton: {\r\n        color: 'red',\r\n    },\r\n};\r\n\r\nexport default TechniqueTable;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,OAAO,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3D,SAASC,aAAa,EAAEC,eAAe,EAAEC,UAAU,QAAQ,uBAAuB;AAClF,SAASC,eAAe,EAAEC,iBAAiB,EAAEC,yBAAyB,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEhG,MAAMC,cAAc,GAAGA,CAAC;EAAEC,UAAU;EAAEC,eAAe;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACmB,eAAe,EAAEC,kBAAkB,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACuB,cAAc,EAAEC,iBAAiB,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACyB,SAAS,EAAEC,YAAY,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC2B,YAAY,EAAEC,eAAe,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC6B,YAAY,EAAEC,eAAe,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACZ,MAAM8B,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACA,MAAMC,IAAI,GAAG,MAAMC,YAAY,CAAC,CAAC;QACjCX,YAAY,CAACU,IAAI,CAAC;MACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACxD;IACJ,CAAC;IACDH,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN9B,SAAS,CAAC,MAAM;IACZ,MAAMmC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACA,MAAMJ,IAAI,GAAG,MAAM1B,iBAAiB,CAAC,CAAC;QACtCkB,iBAAiB,CAACQ,IAAI,CAAC;MAC3B,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC9D;IACJ,CAAC;IACDE,mBAAmB,CAAC,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,eAAe,GAAIC,EAAE,IAAK;IAC5B,MAAMC,QAAQ,GAAGlB,SAAS,CAACmB,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,GAAG,KAAKJ,EAAE,CAAC;IACxD,OAAOC,QAAQ,GAAGA,QAAQ,CAACI,IAAI,GAAG,cAAc;EACpD,CAAC;EAED,MAAMC,oBAAoB,GAAIC,OAAO,IAAK;IACtC,MAAMC,KAAK,GAAGD,OAAO,CAChBE,GAAG,CAAET,EAAE,IAAK;MACT,MAAMU,IAAI,GAAGzB,cAAc,CAACiB,IAAI,CAAES,CAAC,IAAKA,CAAC,CAACP,GAAG,KAAKJ,EAAE,CAAC;MACrD,OAAOU,IAAI,GAAGA,IAAI,CAACL,IAAI,GAAG,UAAU;IACxC,CAAC,CAAC,CACDO,IAAI,CAAC,IAAI,CAAC;IACf,OAAOJ,KAAK;EAChB,CAAC;EAED,MAAMK,OAAO,GAAGpD,OAAO,CACnB,MAAM,CACF;IAAEuC,EAAE,EAAE,MAAM;IAAEc,WAAW,EAAE,MAAM;IAAEC,MAAM,EAAE;EAAS,CAAC,EACrD;IACIf,EAAE,EAAE,eAAe;IACnBc,WAAW,EAAE,eAAe;IAC5BC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEA,CAAC;MAAEC;IAAS,CAAC,KAAKX,oBAAoB,CAACW,QAAQ,CAAC,CAAC;EAC3D,CAAC,EACD;IACIjB,EAAE,EAAE,eAAe;IACnBc,WAAW,EAAE,eAAe;IAC5BC,MAAM,EAAE,kBAAkB;IAC1BC,IAAI,EAAEA,CAAC;MAAEC;IAAS,CAAC,KAAKlB,eAAe,CAACkB,QAAQ,CAAC,CAAC;EACtD,CAAC,EACD;IACIjB,EAAE,EAAE,aAAa;IACjBc,WAAW,EAAE,aAAa;IAC1BC,MAAM,EAAE,gBAAgB;IACxBC,IAAI,EAAEA,CAAC;MAAEC;IAAS,CAAC,KAAKlB,eAAe,CAACkB,QAAQ,CAAC,CAAC;EACtD,CAAC,EACD;IAAEjB,EAAE,EAAE,kBAAkB;IAAEc,WAAW,EAAE,kBAAkB;IAAEC,MAAM,EAAE;EAAoB,CAAC,EACxF;IAAEf,EAAE,EAAE,QAAQ;IAAEc,WAAW,EAAE,QAAQ;IAAEC,MAAM,EAAE;EAAW,CAAC,EAC3D;IACIf,EAAE,EAAE,SAAS;IAAG;IAChBe,MAAM,EAAE,UAAU;IAClBC,IAAI,EAAEA,CAAC;MAAEE;IAAI,CAAC,kBACV/C,OAAA,CAAAE,SAAA;MAAA8C,QAAA,gBACIhD,OAAA;QAAQiD,OAAO,EAAEA,CAAA,KAAMC,UAAU,CAACH,GAAG,CAACI,QAAQ,CAAE;QAAAH,QAAA,EAAC;MAAM;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAChEvD,OAAA;QACIiD,OAAO,EAAEA,CAAA,KAAM3C,eAAe,CAACyC,GAAG,CAACI,QAAQ,CAAClB,GAAG,CAAE;QACjDuB,KAAK,EAAEC,MAAM,CAACC,YAAa;QAAAV,QAAA,EAC9B;MAED;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,eACX;EAEV,CAAC,EACD;IACI1B,EAAE,EAAE,aAAa;IAAG;IACpBe,MAAM,eACF5C,OAAA;MAAQiD,OAAO,EAAEA,CAAA,KAAMhC,YAAY,CAAC,IAAI,CAAE;MAACuC,KAAK,EAAEC,MAAM,CAACE,iBAAkB;MAAAX,QAAA,EAAC;IAE5E;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACX;IACDV,IAAI,EAAEA,CAAA,KAAM,IAAI,CAAE;EACtB,CAAC,CACJ,EACD,CAACjC,SAAS,EAAEE,cAAc,CAC9B,CAAC;EAED,MAAM8C,KAAK,GAAGnE,aAAa,CAAC;IACxB8B,IAAI,EAAEnB,UAAU;IAChBsC,OAAO;IACPhD,eAAe,EAAEA,eAAe,CAAC;EACrC,CAAC,CAAC;EAEF,MAAMwD,UAAU,GAAIW,SAAS,IAAK;IAC9BpD,YAAY,CAACoD,SAAS,CAAC5B,GAAG,CAAC;IAC3BtB,kBAAkB,CAAC;MAAE,GAAGkD;IAAU,CAAC,CAAC;EACxC,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACrBzD,eAAe,CAACK,eAAe,CAAC;IAChCD,YAAY,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMsD,YAAY,GAAGA,CAAA,KAAM;IACvBtD,YAAY,CAAC,IAAI,CAAC;IAClBE,kBAAkB,CAAC,IAAI,CAAC;EAC5B,CAAC;EAED,MAAMqD,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACA;MACA,MAAMlE,yBAAyB,CAACsB,YAAY,EAAEF,YAAY,CAAC;MAC3DD,YAAY,CAAC,KAAK,CAAC;MACnBI,eAAe,CAAC,EAAE,CAAC;MACnBF,eAAe,CAAC,EAAE,CAAC;;MAEnB;MACA,MAAM8C,iBAAiB,GAAG,MAAMC,aAAa,CAAC,CAAC;MAC/CC,aAAa,CAACF,iBAAiB,CAAC,CAAC,CAAC;IAEtC,CAAC,CAAC,OAAOxC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACzD;EACJ,CAAC;EAED,oBACIzB,OAAA;IAAAgD,QAAA,gBACIhD,OAAA;MAAAgD,QAAA,EAAI;IAAU;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBvD,OAAA;MAAOwD,KAAK,EAAEC,MAAM,CAACG,KAAM;MAAAZ,QAAA,gBACvBhD,OAAA;QAAAgD,QAAA,EACKY,KAAK,CAACQ,eAAe,CAAC,CAAC,CAAC9B,GAAG,CAAE+B,WAAW,iBACrCrE,OAAA;UAAAgD,QAAA,EACKqB,WAAW,CAACC,OAAO,CAAChC,GAAG,CAAEM,MAAM,iBAC5B5C,OAAA;YAAoBwD,KAAK,EAAEC,MAAM,CAACZ,IAAK;YAAAG,QAAA,EAClCrD,UAAU,CAACiD,MAAM,CAAC2B,MAAM,CAACC,SAAS,CAAC5B,MAAM,EAAEA,MAAM,CAAC6B,UAAU,CAAC,CAAC;UAAC,GAD3D7B,MAAM,CAACf,EAAE;YAAAuB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEd,CACP;QAAC,GALGc,WAAW,CAACxC,EAAE;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMnB,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACRvD,OAAA;QAAAgD,QAAA,EACKY,KAAK,CAACc,WAAW,CAAC,CAAC,CAACC,IAAI,CAACrC,GAAG,CAAES,GAAG,iBAC9B/C,OAAA;UAAAgD,QAAA,EACKD,GAAG,CAAC6B,eAAe,CAAC,CAAC,CAACtC,GAAG,CAAEO,IAAI,iBAC5B7C,OAAA;YAAkBwD,KAAK,EAAEC,MAAM,CAACZ,IAAK;YAAAG,QAAA,EAChCrD,UAAU,CAACkD,IAAI,CAAC0B,MAAM,CAACC,SAAS,CAAC3B,IAAI,EAAEA,IAAI,CAAC4B,UAAU,CAAC,CAAC;UAAC,GADrD5B,IAAI,CAAChB,EAAE;YAAAuB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEZ,CACP;QAAC,GALGR,GAAG,CAAClB,EAAE;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMX,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,EAEPvC,SAAS,iBACNhB,OAAA;MAAKwD,KAAK,EAAEC,MAAM,CAACoB,YAAa;MAAA7B,QAAA,eAC5BhD,OAAA;QAAKwD,KAAK,EAAEC,MAAM,CAACqB,KAAM;QAAA9B,QAAA,gBACrBhD,OAAA;UAAAgD,QAAA,EAAI;QAAmB;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5BvD,OAAA;UACIuC,IAAI,EAAC,MAAM;UACXwC,WAAW,EAAC,kBAAkB;UAC9BC,KAAK,EAAE5D,YAAa;UACpB6D,QAAQ,EAAGC,CAAC,IAAK7D,eAAe,CAAC6D,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UACjDxB,KAAK,EAAEC,MAAM,CAAC2B;QAAM;UAAAhC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC,eACFvD,OAAA;UACIgF,KAAK,EAAE9D,YAAa;UACpB+D,QAAQ,EAAGC,CAAC,IAAK/D,eAAe,CAAC+D,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UACjDxB,KAAK,EAAEC,MAAM,CAAC2B,KAAM;UAAApC,QAAA,gBAEpBhD,OAAA;YAAQgF,KAAK,EAAC,EAAE;YAAAhC,QAAA,EAAC;UAA0B;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACpDvD,OAAA;YAAQgF,KAAK,EAAC,QAAQ;YAAAhC,QAAA,EAAC;UAAK;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACrCvD,OAAA;YAAQgF,KAAK,EAAC,QAAQ;YAAAhC,QAAA,EAAC;UAAM;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACtCvD,OAAA;YAAQgF,KAAK,EAAC,QAAQ;YAAAhC,QAAA,EAAC;UAAqB;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACrDvD,OAAA;YAAQgF,KAAK,EAAC,SAAS;YAAAhC,QAAA,EAAC;UAAS;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtC,CAAC,eACTvD,OAAA;UAAQiD,OAAO,EAAEe,iBAAkB;UAACR,KAAK,EAAEC,MAAM,CAAC4B,UAAW;UAAArC,QAAA,EAAC;QAE9D;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTvD,OAAA;UAAQiD,OAAO,EAAEA,CAAA,KAAMhC,YAAY,CAAC,KAAK,CAAE;UAACuC,KAAK,EAAEC,MAAM,CAAC6B,WAAY;UAAAtC,QAAA,EAAC;QAEvE;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAChD,EAAA,CAtMIJ,cAAc;EAAA,QAmGFV,aAAa;AAAA;AAAA8F,EAAA,GAnGzBpF,cAAc;AAwMpB,MAAMsD,MAAM,GAAG;EACXG,KAAK,EAAE;IACH4B,KAAK,EAAE,MAAM;IACbC,cAAc,EAAE,UAAU;IAC1BC,MAAM,EAAE;EACZ,CAAC;EACD7C,IAAI,EAAE;IACF8C,SAAS,EAAE,MAAM;IACjBD,MAAM,EAAE,iBAAiB;IACzBE,OAAO,EAAE;EACb,CAAC;EACDlC,YAAY,EAAE;IACVmC,KAAK,EAAE;EACX,CAAC;EACDlC,iBAAiB,EAAE;IACfkC,KAAK,EAAE;EACX,CAAC;EACDhB,YAAY,EAAE;IACV/C,QAAQ,EAAE,OAAO;IACjBgE,GAAG,EAAE,CAAC;IACNC,IAAI,EAAE,CAAC;IACPC,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE,CAAC;IACTC,eAAe,EAAE,oBAAoB;IACrCC,OAAO,EAAE,MAAM;IACfC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EAChB,CAAC;EACDvB,KAAK,EAAE;IACHoB,eAAe,EAAE,OAAO;IACxBN,OAAO,EAAE,MAAM;IACfU,YAAY,EAAE,KAAK;IACnBd,KAAK,EAAE;EACX,CAAC;EACDJ,KAAK,EAAE;IACHI,KAAK,EAAE,MAAM;IACbe,YAAY,EAAE,MAAM;IACpBX,OAAO,EAAE;EACb,CAAC;EACDP,UAAU,EAAE;IACRmB,WAAW,EAAE;EACjB,CAAC;EACDlB,WAAW,EAAE;IACTO,KAAK,EAAE;EACX;AACJ,CAAC;AAED,eAAe1F,cAAc;AAAC,IAAAoF,EAAA;AAAAkB,YAAA,CAAAlB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}